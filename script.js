// SCRIPT.JS - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô –ö–û–î –° –í–°–ï–ú–ò –ù–û–í–´–ú–ò –§–£–ù–ö–¶–ò–Ø–ú–ò

let tg;
let userData = {
    score: 0,
    purchases: [],
    completed: {
        quiz: false,
        quest: false
    },
    stats: {
        quizzesCompleted: 0,
        questsCompleted: 0,
        totalEarned: 0
    },
    profile: {
        name: '',
        phone: '',
        address: ''
    },
    userId: null,
    username: '',
    firstName: '',
    lastSave: null
};

let currentQuestion = 0;
let currentQuestStep = 0;
let storageSyncInterval;
let selectedItem = null;
let currentActivity = null;
let selectedAnswer = null;

// –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
class AgroEcoStorage {
    constructor() {
        this.storageKey = 'agroeco_';
    }
    
    async setItem(key, data) {
        const fullKey = this.storageKey + key;
        const dataToSave = {
            data: data,
            timestamp: Date.now(),
            version: '1.1'
        };
        
        try {
            if (config.storage.useLocalStorage) {
                localStorage.setItem(fullKey, JSON.stringify(dataToSave));
            }
            if (config.storage.useTelegramStorage && tg && tg.CloudStorage) {
                tg.CloudStorage.setItem(fullKey, JSON.stringify(dataToSave));
            }
        } catch (e) {
            console.warn('Storage error:', e);
        }
    }
    
    async getItem(key) {
        const fullKey = this.storageKey + key;
        let data = null;
        
        try {
            if (config.storage.useLocalStorage) {
                const stored = localStorage.getItem(fullKey);
                if (stored) {
                    const parsed = JSON.parse(stored);
                    if (this.isDataValid(parsed)) data = parsed.data;
                }
            }
            
            if (data === null && config.storage.useTelegramStorage && tg && tg.CloudStorage) {
                const stored = tg.CloudStorage.getItem(fullKey);
                if (stored) {
                    const parsed = JSON.parse(stored);
                    if (this.isDataValid(parsed)) {
                        data = parsed.data;
                        if (config.storage.useLocalStorage) this.setItem(key, data);
                    }
                }
            }
        } catch (e) {
            console.warn('Storage read error:', e);
        }
        
        return data;
    }
    
    isDataValid(parsedData) {
        return parsedData && parsedData.data !== undefined && parsedData.version === '1.1';
    }
    
    async removeItem(key) {
        const fullKey = this.storageKey + key;
        try {
            if (config.storage.useLocalStorage) localStorage.removeItem(fullKey);
            if (config.storage.useTelegramStorage && tg && tg.CloudStorage) {
                tg.CloudStorage.removeItem(fullKey);
            }
        } catch (e) {
            console.warn('Storage remove error:', e);
        }
    }
}

const storage = new AgroEcoStorage();

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
function initTelegram() {
    try {
        tg = window.Telegram.WebApp;
        if (tg && tg.initDataUnsafe) {
            setupApp();
        } else {
            setTimeout(initTelegram, 100);
        }
    } catch (error) {
        setupStandaloneApp();
    }
}

function setupApp() {
    try {
        tg.expand();
        tg.enableClosingConfirmation();
        
        const user = tg.initDataUnsafe.user;
        if (user) {
            userData.userId = user.id;
            userData.username = user.username || '';
            userData.firstName = user.first_name;
            updateUserInfo(user);
        }
        
        loadUserData();
        startStorageSync();
        
    } catch (error) {
        setupStandaloneApp();
    }
}

function setupStandaloneApp() {
    userData.userId = 'test_user_' + Date.now();
    userData.firstName = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    document.getElementById('userFirstName').textContent = userData.firstName;
    document.getElementById('menu-user-name').textContent = userData.firstName;
    loadUserData();
}

function updateUserInfo(user) {
    document.getElementById('userFirstName').textContent = user.first_name;
    document.getElementById('menu-user-name').textContent = user.first_name;
    
    if (user.username) {
        const userName = '@' + user.username;
        document.getElementById('userUserName').textContent = userName;
        document.getElementById('profile-user-name').textContent = userName;
    }
    
    document.getElementById('profile-full-name').textContent = 
        `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}`;
    document.getElementById('profile-user-id').textContent = user.id;
    
    if (user.photo_url) {
        document.getElementById('user-avatar').src = user.photo_url;
    }
    
    if (user.id === config.adminId) {
        document.getElementById('admin-btn').style.display = 'block';
    }
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò
async function loadUserData() {
    try {
        if (!userData.userId) return;
        
        const savedData = await storage.getItem('user_data_' + userData.userId);
        if (savedData) {
            Object.assign(userData, {
                ...savedData,
                userId: userData.userId,
                username: userData.username,
                firstName: userData.firstName
            });
        }
        
        updateUI();
        updateMenuButtons();
        
    } catch (error) {
        console.error('Error loading user data:', error);
    }
}

async function saveUserData() {
    try {
        userData.profile.name = document.getElementById('user-name').value;
        userData.profile.phone = document.getElementById('user-phone').value;
        userData.profile.address = document.getElementById('user-address').value;
        
        userData.lastSave = Date.now();
        await storage.setItem('user_data_' + userData.userId, userData);
        
        showSaveStatus('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–æ–≤.', true);
        
    } catch (error) {
        showSaveStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!', false);
    }
}

function showSaveStatus(message, isSuccess) {
    const statusElement = document.getElementById('profile-save-status');
    statusElement.textContent = message;
    statusElement.style.color = isSuccess ? '#4CAF50' : '#ff0000';
    setTimeout(() => statusElement.textContent = '', 5000);
}

async function autoSaveUserData() {
    try {
        if (userData.userId) {
            userData.lastSave = Date.now();
            await storage.setItem('user_data_' + userData.userId, userData);
        }
    } catch (error) {
        console.error('Auto-save error:', error);
    }
}

function startStorageSync() {
    if (storageSyncInterval) clearInterval(storageSyncInterval);
    storageSyncInterval = setInterval(autoSaveUserData, config.storage.syncInterval);
}

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –≠–ö–†–ê–ù–ê–ú–ò
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
        
        switch(screenId) {
            case 'screen-profile': initProfileScreen(); break;
            case 'screen-store': loadStoreItems(); break;
            case 'screen-stats': updateUI(); break;
            case 'screen-admin': loadOrders(); break;
        }
    }
}

function showIntro(activityType) {
    currentActivity = activityType;
    const activityConfig = config[activityType];
    
    document.getElementById('intro-title').textContent = activityConfig.intro.title;
    document.getElementById('intro-image').src = activityConfig.intro.image;
    document.getElementById('intro-description').textContent = activityConfig.intro.description;
    document.getElementById('intro-reward-text').textContent = activityConfig.intro.reward;
    
    document.getElementById('start-activity').onclick = () => {
        if (activityType === 'quiz') startQuiz();
        else if (activityType === 'quest') startQuest();
    };
    
    showScreen('screen-intro');
}

function initProfileScreen() {
    document.getElementById('user-name').value = userData.profile.name || '';
    document.getElementById('user-phone').value = userData.profile.phone || '';
    document.getElementById('user-address').value = userData.profile.address || '';
}

// –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–ê
function updateUI() {
    document.getElementById('userScore').textContent = userData.score;
    document.getElementById('stat-current-score').textContent = userData.score;
    document.getElementById('stat-total-score').textContent = userData.stats.totalEarned;
    document.getElementById('stat-quizzes-completed').textContent = userData.stats.quizzesCompleted;
    document.getElementById('stat-quests-completed').textContent = userData.stats.questsCompleted;
    updatePurchasesList();
}

function updateMenuButtons() {
    const quizBtn = document.getElementById('quiz-btn');
    const questBtn = document.getElementById('quest-btn');
    
    quizBtn.textContent = userData.completed.quiz ? '‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : 'üå± –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç';
    quizBtn.disabled = userData.completed.quiz;
    
    questBtn.textContent = userData.completed.quest ? '‚úÖ –ö–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω' : 'üèûÔ∏è –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç';
    questBtn.disabled = userData.completed.quest;
}

async function updateScore(points) {
    userData.score += points;
    userData.stats.totalEarned += points;
    await autoSaveUserData();
    updateUI();
    if (points > 0) animateScoreIncrease();
}

function animateScoreIncrease() {
    const scoreElement = document.getElementById('userScore');
    scoreElement.style.transform = 'scale(1.3)';
    scoreElement.style.color = '#4CAF50';
    setTimeout(() => {
        scoreElement.style.transform = 'scale(1)';
        scoreElement.style.color = '';
    }, 500);
}

// –¢–ï–°–¢
function startQuiz() {
    if (userData.completed.quiz) {
        showCompletedScreen('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã!');
        return;
    }
    
    currentQuestion = 0;
    selectedAnswer = null;
    showScreen('screen-quiz');
    loadQuestion();
}

function loadQuestion() {
    if (currentQuestion >= config.quiz.questions.length) {
        finishQuiz();
        return;
    }

    const q = config.quiz.questions[currentQuestion];
    document.getElementById('question').textContent = q.question;
    document.getElementById('quiz-progress').textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${config.quiz.questions.length}`;

    const answersContainer = document.getElementById('answers');
    answersContainer.innerHTML = '';
    document.getElementById('next-question').disabled = true;
    selectedAnswer = null;

    q.answers.forEach((answer, index) => {
        const button = document.createElement('button');
        button.textContent = answer;
        button.onclick = () => selectAnswer(index, button);
        answersContainer.appendChild(button);
    });
}

function selectAnswer(answerIndex, buttonElement) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä
    const allButtons = document.getElementById('answers').getElementsByTagName('button');
    Array.from(allButtons).forEach(btn => btn.classList.remove('selected'));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
    buttonElement.classList.add('selected');
    selectedAnswer = answerIndex;
    document.getElementById('next-question').disabled = false;
}

function nextQuestion() {
    if (selectedAnswer === null) return;
    
    const correctIndex = config.quiz.questions[currentQuestion].correct;
    const allButtons = document.getElementById('answers').getElementsByTagName('button');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    Array.from(allButtons).forEach(btn => btn.disabled = true);
    
    if (selectedAnswer === correctIndex) {
        allButtons[selectedAnswer].classList.add('correct');
        updateScore(config.quiz.rewardPerQuestion);
    } else {
        allButtons[selectedAnswer].classList.add('incorrect');
        allButtons[correctIndex].classList.add('correct');
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    setTimeout(() => {
        currentQuestion++;
        loadQuestion();
    }, 1500);
}

function exitQuiz() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
        showScreen('screen-menu');
    }
}

async function finishQuiz() {
    const totalReward = config.quiz.completionBonus + (config.quiz.questions.length * config.quiz.rewardPerQuestion);
    updateScore(config.quiz.completionBonus);
    
    userData.stats.quizzesCompleted++;
    userData.completed.quiz = true;
    
    await autoSaveUserData();
    updateMenuButtons();
    
    showSuccessScreen(`–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${totalReward} –ø—è—Ç–æ—á–∫–æ–≤ üêΩ!`);
}

// –ö–í–ï–°–¢
function startQuest() {
    if (userData.completed.quest) {
        showCompletedScreen('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã!');
        return;
    }
    
    currentQuestStep = 0;
    selectedAnswer = null;
    showScreen('screen-quest');
    loadQuestStep(currentQuestStep);
}

function loadQuestStep(stepIndex) {
    if (stepIndex === -1) {
        questFailed();
        return;
    }
    if (stepIndex >= config.quest.steps.length) {
        questFinished();
        return;
    }

    const step = config.quest.steps[stepIndex];
    document.getElementById('quest-progress').textContent = `–®–∞–≥ ${stepIndex + 1} –∏–∑ ${config.quest.steps.length}`;
    document.getElementById('quest-image').style.backgroundImage = `url('${step.image}')`;
    document.getElementById('quest-description').textContent = step.description;

    const answersContainer = document.getElementById('quest-answers');
    answersContainer.innerHTML = '';
    document.getElementById('next-quest-step').disabled = true;
    selectedAnswer = null;

    step.options.forEach((option, index) => {
        const button = document.createElement('button');
        button.textContent = option.text;
        button.onclick = () => selectQuestAnswer(index, button);
        answersContainer.appendChild(button);
    });
}

function selectQuestAnswer(answerIndex, buttonElement) {
    const allButtons = document.getElementById('quest-answers').getElementsByTagName('button');
    Array.from(allButtons).forEach(btn => btn.classList.remove('selected'));
    
    buttonElement.classList.add('selected');
    selectedAnswer = answerIndex;
    document.getElementById('next-quest-step').disabled = false;
}

function nextQuestStep() {
    if (selectedAnswer === null) return;
    
    const step = config.quest.steps[currentQuestStep];
    const option = step.options[selectedAnswer];
    const allButtons = document.getElementById('quest-answers').getElementsByTagName('button');
    
    Array.from(allButtons).forEach(btn => btn.disabled = true);
    
    if (option.correct) {
        allButtons[selectedAnswer].classList.add('correct');
        updateScore(config.quest.rewardPerStep);
    } else {
        allButtons[selectedAnswer].classList.add('incorrect');
        const correctIndex = step.options.findIndex(opt => opt.correct);
        if (correctIndex !== -1) {
            allButtons[correctIndex].classList.add('correct');
        }
    }
    
    setTimeout(() => {
        currentQuestStep = option.nextStep;
        loadQuestStep(option.nextStep);
    }, 1500);
}

function exitQuest() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
        showScreen('screen-menu');
    }
}

function questFailed() {
    showSuccessScreen('–ö–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –ê–ì–†–û–≠–ö–û!');
}

async function questFinished() {
    const totalReward = config.quest.completionBonus + (config.quest.steps.length * config.quest.rewardPerStep);
    updateScore(config.quest.completionBonus);
    
    userData.stats.questsCompleted++;
    userData.completed.quest = true;
    
    await autoSaveUserData();
    updateMenuButtons();
    
    showSuccessScreen(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${totalReward} –ø—è—Ç–æ—á–∫–æ–≤ üêΩ!`);
}

// –ú–ê–ì–ê–ó–ò–ù
function loadStoreItems() {
    const storeContainer = document.getElementById('store-items');
    storeContainer.innerHTML = '';

    config.store.items.forEach(item => {
        const canBuy = userData.score >= item.price;
        const isPurchased = userData.purchases.includes(item.id);
        
        const itemElement = document.createElement('div');
        itemElement.className = `store-item ${isPurchased ? 'purchased' : ''}`;
        
        itemElement.innerHTML = `
            <img src="${item.image}" alt="${item.name}" onerror="this.src='https://images.unsplash.com/photo-1560472355-536de3962603?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80'">
            <h3>${item.name}</h3>
            <p>${item.description}</p>
            <p class="price">–¶–µ–Ω–∞: ${item.price} üêΩ</p>
            <button ${!canBuy || isPurchased ? 'disabled' : ''}>
                ${isPurchased ? '‚úÖ –í—ã–±—Ä–∞–Ω–æ' : (canBuy ? 'üéÅ –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–∑' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üêΩ')}
            </button>
        `;
        
        if (!isPurchased && canBuy) {
            itemElement.onclick = () => openModal(item);
        }
        
        storeContainer.appendChild(itemElement);
    });
}

// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
function openModal(item) {
    selectedItem = item;
    const modal = document.getElementById('purchase-modal');
    const modalInfo = document.getElementById('modal-item-info');
    
    modalInfo.innerHTML = `
        <img src="${item.image}" alt="${item.name}" onerror="this.src='https://images.unsplash.com/photo-1560472355-536de3962603?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80'">
        <h3>${item.name}</h3>
        <p>${item.description}</p>
        <p class="price">–¶–µ–Ω–∞: ${item.price} üêΩ</p>
        <p>–í–∞—à –±–∞–ª–∞–Ω—Å: <strong>${userData.score} üêΩ</strong></p>
        <p>–û—Å—Ç–∞–Ω–µ—Ç—Å—è: <strong>${userData.score - item.price} üêΩ</strong></p>
    `;
    
    modal.style.display = 'block';
}

function closeModal() {
    document.getElementById('purchase-modal').style.display = 'none';
    selectedItem = null;
}

function openSuccessModal(message) {
    document.getElementById('success-modal-message').textContent = message;
    document.getElementById('success-modal').style.display = 'block';
}

function closeSuccessModal() {
    document.getElementById('success-modal').style.display = 'none';
}

async function confirmPurchase() {
    if (!selectedItem) return;
    
    if (userData.score >= selectedItem.price && !userData.purchases.includes(selectedItem.id)) {
        updateScore(-selectedItem.price);
        userData.purchases.push(selectedItem.id);
        
        saveOrder(selectedItem.id, selectedItem.name, selectedItem.price);
        await autoSaveUserData();
        
        closeModal();
        openSuccessModal(`–ü—Ä–∏–∑ "${selectedItem.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω! üéâ`);
        
        loadStoreItems();
        updatePurchasesList();
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω!');
        closeModal();
    }
}

function goToProfile() {
    closeSuccessModal();
    showScreen('screen-profile');
}

// –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
async function saveOrder(itemId, itemName, price) {
    try {
        const order = {
            id: Date.now(),
            userId: userData.userId,
            username: userData.username,
            firstName: userData.firstName,
            itemId: itemId,
            itemName: itemName,
            price: price,
            date: new Date().toLocaleString('ru-RU'),
            profile: { ...userData.profile },
            status: '–Ω–æ–≤—ã–π'
        };
        
        const orders = await storage.getItem('all_orders') || [];
        orders.push(order);
        await storage.setItem('all_orders', orders);
        
    } catch (error) {
        console.error('Error saving order:', error);
    }
}

async function loadOrders() {
    try {
        const orders = await storage.getItem('all_orders') || [];
        const tbody = document.getElementById('orders-table-body');
        
        if (orders.length === 0) {
            tbody.innerHTML = '<tr><td colspan="8">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>';
            return;
        }
        
        tbody.innerHTML = '';
        orders.forEach(order => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${order.date}</td>
                <td>${order.firstName}${order.username ? ' (@' + order.username + ')' : ''}</td>
                <td>${order.itemName}</td>
                <td>${order.price} üêΩ</td>
                <td>${order.profile.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                <td>${order.profile.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${order.profile.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                <td>${order.status}</td>
            `;
            tbody.appendChild(tr);
        });
    } catch (error) {
        console.error('Error loading orders:', error);
    }
}

function showUserManagement() {
    const userManagement = document.getElementById('user-management');
    userManagement.style.display = userManagement.style.display === 'none' ? 'block' : 'none';
}

async function resetUserProgress() {
    const userId = document.getElementById('user-id-input').value.trim();
    if (!userId) {
        showUserManagementStatus('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false);
        return;
    }
    
    try {
        const userData = await storage.getItem('user_data_' + userId);
        if (!userData) {
            showUserManagementStatus('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', false);
            return;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const resetData = {
            ...userData,
            score: 0,
            purchases: [],
            completed: { quiz: false, quest: false },
            stats: {
                quizzesCompleted: 0,
                questsCompleted: 0,
                totalEarned: 0
            }
        };
        
        await storage.setItem('user_data_' + userId, resetData);
        showUserManagementStatus('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω ‚úÖ', true);
        
    } catch (error) {
        showUserManagementStatus('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', false);
    }
}

async function deleteUserData() {
    const userId = document.getElementById('user-id-input').value.trim();
    if (!userId) {
        showUserManagementStatus('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false);
        return;
    }
    
    if (!confirm('–í–´ –£–í–ï–†–ï–ù–´? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')) return;
    
    try {
        await storage.removeItem('user_data_' + userId);
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const orders = await storage.getItem('all_orders') || [];
        const filteredOrders = orders.filter(order => order.userId !== userId);
        await storage.setItem('all_orders', filteredOrders);
        
        showUserManagementStatus('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã ‚úÖ', true);
        
    } catch (error) {
        showUserManagementStatus('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', false);
    }
}

function showUserManagementStatus(message, isSuccess) {
    const statusElement = document.getElementById('user-management-status');
    statusElement.textContent = message;
    statusElement.style.color = isSuccess ? '#4CAF50' : '#ff0000';
    setTimeout(() => statusElement.textContent = '', 3000);
}

async function exportOrders() {
    try {
        const orders = await storage.getItem('all_orders') || [];
        if (orders.length === 0) {
            alert('–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        let csv = '–î–∞—Ç–∞,ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–ò–º—è,Username,–ü—Ä–∏–∑,–¶–µ–Ω–∞,–§–ò–û,–¢–µ–ª–µ—Ñ–æ–Ω,–ê–¥—Ä–µ—Å,–°—Ç–∞—Ç—É—Å\n';
        
        orders.forEach(order => {
            csv += `"${order.date}",${order.userId},"${order.firstName}","${order.username || ''}","${order.itemName}",${order.price},"${order.profile.name || ''}","${order.profile.phone || ''}","${order.profile.address || ''}","${order.status}"\n`;
        });
        
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        
        link.setAttribute('href', url);
        link.setAttribute('download', 'agroeco_orders.csv');
        link.style.visibility = 'hidden';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error exporting orders:', error);
    }
}

// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function updatePurchasesList() {
    const purchasesList = document.getElementById('user-purchases');
    purchasesList.innerHTML = '';
    
    userData.purchases.forEach(purchaseId => {
        const item = config.store.items.find(i => i.id === purchaseId);
        if (item) {
            const li = document.createElement('li');
            li.innerHTML = `<span>${item.name}</span><span>‚úÖ –í—ã–±—Ä–∞–Ω–æ</span>`;
            purchasesList.appendChild(li);
        }
    });
    
    if (userData.purchases.length === 0) {
        purchasesList.innerHTML = '<li>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</li>';
    }
}

function showSuccessScreen(message) {
    document.getElementById('success-message').textContent = message;
    showScreen('screen-success');
}

function showCompletedScreen(message) {
    document.getElementById('completed-message').textContent = message;
    showScreen('screen-completed');
}

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
function setupEventListeners() {
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('purchase-modal');
        const successModal = document.getElementById('success-modal');
        if (event.target === modal) closeModal();
        if (event.target === successModal) closeSuccessModal();
    });
    
    window.addEventListener('beforeunload', autoSaveUserData);
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', function() {
    initTelegram();
    setupEventListeners();
});
