// SCRIPT.JS - –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø

let tg;
let userData = {
    score: 0,
    purchases: [],
    stats: {
        quizzesCompleted: 0,
        questsCompleted: 0,
        totalEarned: 0
    },
    profile: {
        name: '',
        phone: '',
        address: ''
    }
};
let currentQuestion = 0;
let currentQuestStep = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initTelegram() {
    tg = window.Telegram.WebApp;
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp
    if (tg && tg.initDataUnsafe) {
        setupApp();
    } else {
        // –ï—Å–ª–∏ Telegram API –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º
        setTimeout(initTelegram, 100);
    }
}

function setupApp() {
    tg.expand();
    tg.enableClosingConfirmation();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const user = tg.initDataUnsafe.user;
    if (user) {
        document.getElementById('userFirstName').textContent = user.first_name;
        document.getElementById('menu-user-name').textContent = user.first_name;
        
        if (user.username) {
            document.getElementById('userUserName').textContent = '@' + user.username;
            document.getElementById('profile-user-name').textContent = '@' + user.username;
        }
        
        document.getElementById('profile-full-name').textContent = 
            `${user.first_name}${user.last_name ? ' ' + user.last_name : ''}`;
        
        if (user.photo_url) {
            document.getElementById('user-avatar').src = user.photo_url;
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    try {
        const savedData = tg.CloudStorage.getItem('user_data');
        if (savedData) {
            const parsedData = JSON.parse(savedData);
            userData = { ...userData, ...parsedData };
        }
        updateUI();
        showScreen('screen-menu');
    } catch (e) {
        console.error('Error loading user data:', e);
        showScreen('screen-menu');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserData() {
    userData.profile.name = document.getElementById('user-name').value;
    userData.profile.phone = document.getElementById('user-phone').value;
    userData.profile.address = document.getElementById('user-address').value;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Telegram
    tg.CloudStorage.setItem('user_data', JSON.stringify(userData));
    
    const statusElement = document.getElementById('profile-save-status');
    statusElement.textContent = '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!';
    statusElement.style.color = '#4CAF50';
    
    setTimeout(() => {
        statusElement.textContent = '';
    }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById('userScore').textContent = userData.score;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('stat-total-score').textContent = userData.stats.totalEarned;
    document.getElementById('stat-quizzes-completed').textContent = userData.stats.quizzesCompleted;
    document.getElementById('stat-quests-completed').textContent = userData.stats.questsCompleted;
    document.getElementById('stat-items-purchased').textContent = userData.purchases.length;
    
    updatePurchasesList();
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (screenId === 'screen-profile') {
        document.getElementById('user-name').value = userData.profile.name || '';
        document.getElementById('user-phone').value = userData.profile.phone || '';
        document.getElementById('user-address').value = userData.profile.address || '';
    } else if (screenId === 'screen-store') {
        loadStoreItems();
    } else if (screenId === 'screen-stats') {
        updateUI();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore(points) {
    userData.score += points;
    userData.stats.totalEarned += points;
    tg.CloudStorage.setItem('user_data', JSON.stringify(userData));
    updateUI();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
    if (points > 0) {
        const scoreElement = document.getElementById('userScore');
        scoreElement.style.transform = 'scale(1.5)';
        scoreElement.style.color = '#4CAF50';
        setTimeout(() => {
            scoreElement.style.transform = 'scale(1)';
            scoreElement.style.color = '';
        }, 500);
    }
}

// –¢–ï–°–¢
function startQuiz() {
    currentQuestion = 0;
    showScreen('screen-quiz');
    loadQuestion();
}

function loadQuestion() {
    if (currentQuestion >= config.quiz.questions.length) {
        finishQuiz();
        return;
    }

    const q = config.quiz.questions[currentQuestion];
    document.getElementById('question').textContent = q.question;
    document.getElementById('quiz-progress').textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestion + 1} –∏–∑ ${config.quiz.questions.length}`;

    const answersContainer = document.getElementById('answers');
    answersContainer.innerHTML = '';
    document.getElementById('next-question').disabled = true;

    q.answers.forEach((answer, index) => {
        const button = document.createElement('button');
        button.textContent = answer;
        button.onclick = () => checkAnswer(index, button);
        answersContainer.appendChild(button);
    });
}

function checkAnswer(userChoice, buttonElement) {
    const correctIndex = config.quiz.questions[currentQuestion].correct;
    const allButtons = document.getElementById('answers').getElementsByTagName('button');

    Array.from(allButtons).forEach(btn => { btn.disabled = true; });

    if (userChoice === correctIndex) {
        buttonElement.style.background = 'linear-gradient(135deg, #4CAF50 0%, #388E3C 100%)';
        buttonElement.style.color = 'white';
        updateScore(config.quiz.rewardPerQuestion);
    } else {
        buttonElement.style.background = '#ffebee';
        buttonElement.style.color = '#c62828';
        allButtons[correctIndex].style.background = 'linear-gradient(135deg, #4CAF50 0%, #388E3C 100%)';
        allButtons[correctIndex].style.color = 'white';
    }

    document.getElementById('next-question').disabled = false;
}

function nextQuestion() {
    currentQuestion++;
    loadQuestion();
}

function exitQuiz() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
        showScreen('screen-menu');
    }
}

function finishQuiz() {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    updateScore(config.quiz.completionBonus);
    userData.stats.quizzesCompleted++;
    tg.CloudStorage.setItem('user_data', JSON.stringify(userData));
    
    showScreen('screen-success');
    document.getElementById('success-message').textContent = 
        `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${config.quiz.completionBonus + (config.quiz.questions.length * config.quiz.rewardPerQuestion)} –ø—è—Ç–æ—á–∫–æ–≤ üêΩ!`;
}

// –ö–í–ï–°–¢
function startQuest() {
    currentQuestStep = 0;
    showScreen('screen-quest');
    loadQuestStep(currentQuestStep);
}

function loadQuestStep(stepIndex) {
    if (stepIndex === -1) {
        questFailed();
        return;
    }
    if (stepIndex >= config.quest.steps.length) {
        questFinished();
        return;
    }

    const step = config.quest.steps[stepIndex];
    document.getElementById('quest-title').textContent = config.quest.title;
    document.getElementById('quest-description').textContent = step.description;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–≤–µ—Å—Ç–∞
    const questImage = document.getElementById('quest-image');
    questImage.style.backgroundImage = `url('${step.image}')`;

    const optionsContainer = document.getElementById('quest-options');
    optionsContainer.innerHTML = '';

    step.options.forEach(option => {
        const button = document.createElement('button');
        button.textContent = option.text;
        button.onclick = () => {
            if (option.correct) {
                updateScore(config.quest.rewardPerStep);
            }
            currentQuestStep = option.nextStep;
            loadQuestStep(option.nextStep);
        };
        optionsContainer.appendChild(button);
    });
}

function exitQuest() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.')) {
        showScreen('screen-menu');
    }
}

function questFailed() {
    showScreen('screen-success');
    document.getElementById('success-message').textContent = '–ö–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –ê–ì–†–û–≠–ö–û!';
}

function questFinished() {
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
    updateScore(config.quest.completionBonus);
    userData.stats.questsCompleted++;
    tg.CloudStorage.setItem('user_data', JSON.stringify(userData));
    
    showScreen('screen-success');
    document.getElementById('success-message').textContent = 
        `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${config.quest.completionBonus + (config.quest.steps.length * config.quest.rewardPerStep)} –ø—è—Ç–æ—á–∫–æ–≤ üêΩ!`;
}

// –ú–ê–ì–ê–ó–ò–ù
function loadStoreItems() {
    const storeContainer = document.getElementById('store-items');
    storeContainer.innerHTML = '';

    config.store.items.forEach(item => {
        const canBuy = userData.score >= item.price;
        const isPurchased = userData.purchases.includes(item.id);
        
        const itemElement = document.createElement('div');
        itemElement.className = 'store-item';
        itemElement.innerHTML = `
            <img src="${item.image}" alt="${item.name}">
            <h3>${item.name}</h3>
            <p>${item.description}</p>
            <p class="price">–¶–µ–Ω–∞: ${item.price} üêΩ</p>
            <button onclick="buyItem(${item.id}, ${item.price}, '${item.name}')" 
                    ${!canBuy || isPurchased ? 'disabled' : ''}>
                ${isPurchased ? '–ü–æ–ª—É—á–µ–Ω–æ' : (canBuy ? '–û–±–º–µ–Ω—è—Ç—å' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üêΩ')}
            </button>
        `;
        storeContainer.appendChild(itemElement);
    });
}

function buyItem(itemId, price, itemName) {
    if (userData.score >= price && !userData.purchases.includes(itemId)) {
        updateScore(-price);
        userData.purchases.push(itemId);
        tg.CloudStorage.setItem('user_data', JSON.stringify(userData));
        
        showScreen('screen-success');
        document.getElementById('success-message').textContent = 
            `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π "${itemName}"! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.`;
        
        loadStoreItems();
        updatePurchasesList();
    }
}

function updatePurchasesList() {
    const purchasesList = document.getElementById('user-purchases');
    purchasesList.innerHTML = '';
    
    userData.purchases.forEach(purchaseId => {
        const item = config.store.items.find(i => i.id === purchaseId);
        if (item) {
            const li = document.createElement('li');
            li.textContent = item.name;
            li.innerHTML = `
                <span>${item.name}</span>
                <span>‚úÖ</span>
            `;
            purchasesList.appendChild(li);
        }
    });
    
    if (userData.purchases.length === 0) {
        purchasesList.innerHTML = '<li>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤</li>';
    }
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', () => {
    initTelegram();
});
