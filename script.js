// SCRIPT.JS - –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù –ò –£–õ–£–ß–®–ï–ù –ö–í–ï–°–¢

let tg;
let userData = {
    score: 0,
    purchases: [],
    completed: {
        quiz: false,
        quest: false
    },
    stats: {
        quizzesCompleted: 0,
        questsCompleted: 0,
        totalEarned: 0
    },
    profile: {
        name: '',
        phone: '',
        address: ''
    },
    userId: null,
    username: '',
    firstName: '',
    lastSave: null
};

let currentQuestion = 0;
let currentQuestStep = 0;
let storageSyncInterval;
let selectedItem = null;

// ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ AgroEcoStorage –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê
function openModal(item) {
    selectedItem = item;
    const modal = document.getElementById('purchase-modal');
    const modalInfo = document.getElementById('modal-item-info');
    
    modalInfo.innerHTML = `
        <img src="${item.image}" alt="${item.name}" onerror="this.src='https://images.unsplash.com/photo-1560472355-536de3962603?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80'">
        <h3>${item.name}</h3>
        <p>${item.description}</p>
        <p class="price">–¶–µ–Ω–∞: ${item.price} üêΩ</p>
        <p>–í–∞—à –±–∞–ª–∞–Ω—Å: <strong>${userData.score} üêΩ</strong></p>
    `;
    
    modal.style.display = 'block';
}

function closeModal() {
    document.getElementById('purchase-modal').style.display = 'none';
    selectedItem = null;
}

function openSuccessModal(message) {
    document.getElementById('success-modal-message').textContent = message;
    document.getElementById('success-modal').style.display = 'block';
}

function closeSuccessModal() {
    document.getElementById('success-modal').style.display = 'none';
}

function goToProfile() {
    closeSuccessModal();
    showScreen('screen-profile');
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
async function confirmPurchase() {
    if (!selectedItem) return;
    
    if (userData.score >= selectedItem.price && !userData.purchases.includes(selectedItem.id)) {
        updateScore(-selectedItem.price);
        userData.purchases.push(selectedItem.id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        saveOrder(selectedItem.id, selectedItem.name, selectedItem.price);
        
        await autoSaveUserData();
        
        closeModal();
        openSuccessModal(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π "${selectedItem.name}"! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.`);
        
        loadStoreItems();
        updatePurchasesList();
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –∫—É–ø–ª–µ–Ω!');
        closeModal();
    }
}

// –ú–ê–ì–ê–ó–ò–ù - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function loadStoreItems() {
    const storeContainer = document.getElementById('store-items');
    storeContainer.innerHTML = '';

    config.store.items.forEach(item => {
        const canBuy = userData.score >= item.price;
        const isPurchased = userData.purchases.includes(item.id);
        
        const itemElement = document.createElement('div');
        itemElement.className = 'store-item';
        itemElement.onclick = () => {
            if (!isPurchased && canBuy) {
                openModal(item);
            }
        };
        
        itemElement.innerHTML = `
            <img src="${item.image}" alt="${item.name}" onerror="this.src='https://images.unsplash.com/photo-1560472355-536de3962603?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&q=80'">
            <h3>${item.name}</h3>
            <p>${item.description}</p>
            <p class="price">–¶–µ–Ω–∞: ${item.price} üêΩ</p>
            <button ${!canBuy || isPurchased ? 'disabled' : ''}>
                ${isPurchased ? '–ü–æ–ª—É—á–µ–Ω–æ' : (canBuy ? '–í—ã–±—Ä–∞—Ç—å' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üêΩ')}
            </button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if (isPurchased) {
            itemElement.classList.add('purchased');
        }
        
        storeContainer.appendChild(itemElement);
    });
}

// –ö–í–ï–°–¢ - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function startQuest() {
    if (userData.completed.quest) {
        showScreen('screen-completed');
        document.getElementById('completed-message').textContent = '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã!';
        return;
    }
    
    currentQuestStep = 0;
    showScreen('screen-quest');
    loadQuestStep(currentQuestStep);
}

function loadQuestStep(stepIndex) {
    if (stepIndex === -1) {
        questFailed();
        return;
    }
    if (stepIndex >= config.quest.steps.length) {
        questFinished();
        return;
    }

    const step = config.quest.steps[stepIndex];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    document.getElementById('quest-progress').textContent = `–®–∞–≥ ${stepIndex + 1} –∏–∑ ${config.quest.steps.length}`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const questImage = document.getElementById('quest-image');
    questImage.style.backgroundImage = `url('${step.image}')`;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    document.getElementById('quest-description').textContent = step.description;

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const answersContainer = document.getElementById('quest-answers');
    answersContainer.innerHTML = '';

    step.options.forEach((option, index) => {
        const button = document.createElement('button');
        button.textContent = option.text;
        button.onclick = () => {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            const allButtons = answersContainer.getElementsByTagName('button');
            Array.from(allButtons).forEach(btn => { btn.disabled = true; });
            
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            if (option.correct) {
                button.style.background = 'linear-gradient(135deg, #4CAF50 0%, #388E3C 100%)';
                button.style.color = 'white';
                updateScore(config.quest.rewardPerStep);
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                setTimeout(() => {
                    currentQuestStep = option.nextStep;
                    loadQuestStep(option.nextStep);
                }, 1000);
            } else {
                button.style.background = '#ffebee';
                button.style.color = '#c62828';
                
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                const correctOption = step.options.find(opt => opt.correct);
                if (correctOption) {
                    const correctIndex = step.options.indexOf(correctOption);
                    const correctButton = answersContainer.children[correctIndex];
                    correctButton.style.background = 'linear-gradient(135deg, #4CAF50 0%, #388E3C 100%)';
                    correctButton.style.color = 'white';
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –ø—Ä–æ–≤–∞–ª—É
                setTimeout(() => {
                    currentQuestStep = option.nextStep;
                    loadQuestStep(option.nextStep);
                }, 1500);
            }
        };
        answersContainer.appendChild(button);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('purchase-modal');
    const successModal = document.getElementById('success-modal');
    
    if (event.target === modal) {
        closeModal();
    }
    if (event.target === successModal) {
        closeSuccessModal();
    }
};

// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
document.addEventListener('DOMContentLoaded', () => {
    initTelegram();
});
